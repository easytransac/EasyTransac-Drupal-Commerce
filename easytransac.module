<?php

/**
 * @file
 * Implements Easytransac Website Payment in Drupal Commerce checkout.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function easytransac_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['easytransac'] = array(
    'base' => 'easytransac',
    'title' => t('EasyTransac Payment'),
    'short_title' => t('ET Payment'),
    'description' => t('Easytransac Website Payment'),
    'display_title' => t('Easytransac Website Payment'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the EasyTransac payment method.
 */
function easytransac_default_settings() {
  return array(
    'api_key' => '',
    'currency_code' => 'EUR',
    '3ds' => TRUE,
  );
}

/**
 * Implements hook_menu().
 */
function easytransac_menu() {
  $items['easytransac/notification'] = array(
    'page callback' => 'easytransac_notification',
    'type' => MENU_CALLBACK,
    'access callback' => 'easytransac_notification_access',
  );
  return $items;
}

/**
 * Manage notification uri access.
 *
 * @return bool
 *   TRUE.
 */
function easytransac_notification_access() {
  return TRUE;
}

/**
 * EasyTransac notification URL.
 */
function easytransac_notification() {
  if (!empty($_POST)) {
    easytransac__add_transaction($_POST);
  }
}

/**
 * Payment method callback: settings form.
 */
function easytransac_settings_form($settings = array()) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + easytransac_default_settings();

  // Requirements.
  $openssl_version_supported = OPENSSL_VERSION_NUMBER >= 0x10001000;
  $curl_activated = function_exists('curl_version');

  if (!$openssl_version_supported) {
    drupal_set_message(t('EasyTransac: OpenSSL version not supported "@version" < 1.0.1', array('@version' => OPENSSL_VERSION_TEXT)), 'error');
  }

  if (!$curl_activated) {
    drupal_set_message(t('EasyTransac: PHP cURL extension missing'), 'error');
  }

  $form['api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('EasyTransac API Key'),
    '#description' => t('Your Easytransac API Key'),
    '#default_value' => $settings['api_key'],
    '#required' => TRUE,
  );

  $form['multiple_payments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow payments in 3 times'),
    '#description' => t("Option available on demand. Available for payments starting at 100 EUR."),
    '#default_value' => $settings['multiple_payments'],
  );

  $form['3ds'] = array(
    '#type' => 'checkbox',
    '#title' => t('3DSecure transactions only'),
    '#description' => t("3D Secure is a secure payment protocol. Its aim is to reduce fraud for merchants and secure customer payments. The customer will be redirected to his bank's site that will ask for additional information."),
    '#default_value' => $settings['3ds'],
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function easytransac_form_commerce_checkout_form_alter(&$form, &$form_state) {

  // Adds Easytransac payment option to the checkout form.
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      $temp = explode('|', $key);
      $method_id = $temp[0];

      if ($method_id == 'easytransac') {
        // Reset multiple payment session info.
        $_SESSION['easytransac_multiple_payments'] = 0;
        $variables = array(
          'path' => 'https://easytransac.com/img/pad_cms.jpg',
          'title' => 'EasyTransac',
          'alt' => 'EasyTransac',
          'attributes' => array(
            'class' => array(
              'easytransac-icon',
            ),
          ),
        );
        $value = theme('image', $variables) . ' ' . t('Easytransac - payez avec votre carte de crédit');

        $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'easytransac') . '/easytransac.css';

        break;
      }
    }
  }
}

/**
 * Implements CALLBACK_commerce_payment_method_submit_form().
 *
 * Adds the multiple payment option.
 */
function easytransac_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $form = array();

  if ($payment_method['settings']['multiple_payments'] && easytransac__order_supports_multiple_payments($order)) {

    // Order amount.
    $amount = easytransac__order_amount($order);
    $down_payments = easytransac__down_payment($amount, TRUE);

    // Adds multiple payments opt in.
    $form['multiple_payments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Paiement en 3 fois'),
    );
    $form['multiple_payments_rates'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'easytransac-multiple-payments-rates',
        ),
      ),
    );
    $form['multiple_payments_rates']['info'] = array(
      '#markup' => t("Paiement d'un premier acompte de @first suivi de deux mensualités de @second.", $down_payments),
    );
  }
  return $form;
}

/**
 * Calculates the multiple payments.
 *
 * @param int $amount
 *   Amount in cents.
 * @param bool $format
 *   Enables amount formatting.
 *
 * @return array
 *   Each payment's amount.
 */
function easytransac__down_payment($amount, $format = FALSE) {
  $down_payment = (int) floor($amount / 3);
  $first = $down_payment + ($amount % 3);
  $second = $down_payment;
  $third = $down_payment;
  if ($format) {
    $first = commerce_currency_format($first, 'EUR');
    $second = commerce_currency_format($second, 'EUR');
    $third = commerce_currency_format($third, 'EUR');
  }
  return array('@first' => $first, '@second' => $second, '@third' => $third);
}

/**
 * Order amount helper function.
 *
 * @param object $order
 *   Commerce Order object.
 *
 * @return int
 *   Order amount.
 */
function easytransac__order_amount(stdClass $order) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  return (int) $wrapper->commerce_order_total->amount->value();
}

/**
 * Checks if an order can apply to multiple payments.
 *
 * @param object $order
 *   Commerce Order object.
 *
 * @return bool
 *   TRUE means the order can apply to multiple payments.
 */
function easytransac__order_supports_multiple_payments(stdClass $order) {
  return easytransac__order_amount($order) >= 10000;
}

/**
 * Implements CALLBACK_commerce_payment_method_submit_form_submit().
 *
 * Checks if the multiple payment option has been chosen.
 */
function easytransac_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  if (easytransac__order_supports_multiple_payments($order)) {
    $_SESSION['easytransac_multiple_payments'] = isset($pane_values['multiple_payments']) ? $pane_values['multiple_payments'] : 0;
  }
}

/**
 * Payment method callback: redirect form.
 */
function easytransac_redirect_form($form, &$form_state, $order, $payment_method) {
  // Errors if the API Key is not configured.
  if (empty($payment_method['settings']['api_key'])) {
    drupal_set_message(t('Please configure your EasyTransac API Key.'), 'error');
    return array();
  }
  $return_url = 'checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'];
  $cancel_url = 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'];

  $settings = array(
    'ReturnUrl' => url($return_url, array(
      'absolute' => TRUE,
      'https' => TRUE,
    )),
    'CancelUrl' => url($cancel_url, array(
      'absolute' => TRUE,
      'https' => TRUE,
    )),
    'payment_method' => $payment_method['instance_id'],
  );
  $merged_settings = $payment_method['settings'] + $settings;
  return easytransac_order_form($form, $form_state, $order, $merged_settings);
}

/**
 * Payment method callback: redirect form return validation.
 */
function easytransac_redirect_form_validate($order, $payment_method) {
  if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') {
    easytransac__add_transaction($_POST, $order, $payment_method);
  }
}

/**
 * Builds an EasyTransac external payment page form from an order object.
 */
function easytransac_order_form($form, &$form_state, $order, $settings) {

  // Order amount.
  $amount = easytransac__order_amount($order);

  // Ensure a default value for the payment_method setting.
  $settings += array(
    'payment_method' => '',
  );

  global $user;

  $customer = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);

  // Multiple payment was opted in plus multiple payments must be enabled.
  $multiple_payments = isset($_SESSION['easytransac_multiple_payments']) ? ($_SESSION['easytransac_multiple_payments'] && $settings['multiple_payments']) : 0;

  // Order mail if anonymous.
  $data = array(
    "Amount" => $amount,
    "ClientIp" => ip_address(),
    "Email" => !empty($user->mail) ? $user->mail : $order->mail,
    "OrderId" => $order->order_id,
    "Uid" => $user->uid,
    "ReturnUrl" => $settings['ReturnUrl'],
    "CancelUrl" => $settings['CancelUrl'],
    "3DS" => $settings['3ds'] ? 'yes' : 'no',
    "MultiplePayments" => $multiple_payments ? 'yes' : 'no',
    "Firstname" => $customer->commerce_customer_address[LANGUAGE_NONE][0]['first_name'],
    "Lastname" => $customer->commerce_customer_address[LANGUAGE_NONE][0]['last_name'],
    "Address" => $customer->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'],
    "ZipCode" => $customer->commerce_customer_address[LANGUAGE_NONE][0]['postal_code'],
    "City" => $customer->commerce_customer_address[LANGUAGE_NONE][0]['locality'],
    "BirthDate" => "",
    "Nationality" => "",
    "CallingCode" => "",
    "Phone" => "",
    "UserAgent" => isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '',
  );

  if ($multiple_payments) {
    $down_payments = easytransac__down_payment($amount);
    $data['DownPayment'] = $down_payments['@first'];
  }

  $data['Signature'] = easytransac__get_signature($data, $settings['api_key']);
  // Call EasyTransac API to initialize a transaction.
  if (function_exists('curl_version')) {
    $curl = curl_init();
    $curl_header = 'EASYTRANSAC-API-KEY:' . $settings['api_key'];
    curl_setopt($curl, CURLOPT_HTTPHEADER, array($curl_header));
    curl_setopt($curl, CURLOPT_POST, TRUE);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    if (defined('CURL_SSLVERSION_TLSv1_2')) {
      $cur_url = 'https://www.easytransac.com/api/payment/page';
    }
    else {
      $cur_url = 'https://gateway.easytransac.com';
    }
    curl_setopt($curl, CURLOPT_URL, $cur_url);
    curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($data));
    $et_return = curl_exec($curl);
    if (curl_errno($curl)) {
      watchdog(WATCHDOG_ERROR, curl_error($curl));
    }
    curl_close($curl);
    $et_return = json_decode($et_return, TRUE);
  }
  else {
    $opts = array(
      'http' => array(
        'method' => 'POST',
        'header' => "Content-type: application/x-www-form-urlencoded\r\n"
        . "EASYTRANSAC-API-KEY:" . $settings['api_key'] . "\r\n",
        'content' => http_build_query($data),
        'timeout' => 5,
      ),
    );
    $context = stream_context_create($opts);
    $et_return = file_get_contents('https://gateway.easytransac.com', FALSE, $context);
    $et_return = json_decode($et_return, TRUE);
  }

  if (!empty($et_return['Error'])) {
    $message = t('Error: !message', array(
      '!message' => $et_return['Error'],
    ));
    watchdog('easytransac', $message, array(), WATCHDOG_ERROR);
    drupal_set_message($message, 'error');
    return array();
  }

  // Allow modules to alter parameters of the API request.
  drupal_alter('easytransac_order_form_data', $data, $order);

  // Post parameters to the external payment page.
  $form['#action'] = $et_return['Result']['PageUrl'];

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array(
        '#type' => 'hidden',
        '#value' => $value,
      );
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to EasyTransac'),
  );

  return $form;
}

/**
 * Easytransac API key signature.
 *
 * @param array $params
 *      Data to be signed.
 * @param string $api_key
 *      API key.
 *
 * @return string
 *   API key.
 */
function easytransac__get_signature($params, $api_key) {
  $signature = '';
  if (is_array($params)) {
    ksort($params);
    foreach ($params as $name => $valeur) {
      if (strcasecmp($name, 'signature') != 0) {
        if (is_array($valeur)) {
          ksort($valeur);
          foreach ($valeur as $v) {
            $signature .= $v . '$';
          }
        }
        else {
          $signature .= $valeur . '$';
        }
      }
    }
  }
  else {
    $signature = $params . '$';
  }

  $signature .= $api_key;
  return sha1($signature);
}

/**
 * Check the signature of EasyTransac's incoming data.
 *
 * @param array $data
 *      ET received data.
 * @param string $api_key
 *      ET API key.
 *
 * @return bool
 *   TRUE if the signature is valid.
 */
function easytransac__verify_signature($data, $api_key) {
  $signature = $data['Signature'];
  unset($data['Signature']);
  $calculated = easytransac__get_signature($data, $api_key);
  return $signature === $calculated;
}

/**
 * Updates order with a transaction.
 *
 * @param array $received_data
 *      Data from ET.
 * @param object $order
 *      Commerce order object.
 * @param object $payment_instance
 *      Payment instance object.
 */
function easytransac__add_transaction($received_data, $order = NULL, $payment_instance = NULL) {
  // First minimal data validation.
  $required_fields = array(
    'RequestId',
    'Tid',
    'Uid',
    'OrderId',
    'Status',
    'Signature',
  );

  if (empty($received_data)) {
    watchdog('easytransac', 'Invalid data received: empty data packet.', array(), WATCHDOG_ERROR);
    return;
  }

  foreach ($required_fields as $field_key) {
    if (empty($received_data[$field_key])) {
      watchdog('easytransac', 'Invalid data received: missing required field', array(), WATCHDOG_ERROR);
      return;
    }
  }

  // Check signature.
  if (is_null($payment_instance)) {
    $payment_instance = commerce_payment_method_instance_load("easytransac|commerce_payment_easytransac");
  }

  if (empty($payment_instance)) {
    watchdog('easytransac', 'No payment instance found.', array(), WATCHDOG_ERROR);
    return;
  }

  $signature_verified = easytransac__verify_signature($received_data, $payment_instance['settings']['api_key']);

  if (!$signature_verified) {
    watchdog('easytransac', 'Invalid signature of received data.', array(), WATCHDOG_ERROR);
    return;
  }

  // Retrieve orders.
  if (is_null($order)) {
    $order = commerce_order_load(intval($received_data['OrderId']));
    if (!$order) {
      watchdog('easytransac', 'Unknown order ID received.', array(), WATCHDOG_ERROR);
      return;
    }
  }

  if (empty($order)) {
    watchdog('easytransac', 'No order found.', array(), WATCHDOG_ERROR);
    return;
  }

  $payments = commerce_payment_transaction_load_multiple(array(), array(
    'order_id' => $order->order_id,
  ));

  $count_succeeded_payments = 0;

  // Verify if the received data has already been processed.
  foreach ($payments as $payment) {
    if ($payment->remote_id == $received_data['Tid']) {
      if ($payment->status != COMMERCE_PAYMENT_STATUS_PENDING) {
        // Transaction already processed.
        watchdog('easytransac', 'Transaction already processed.', array(), WATCHDOG_NOTICE);
        return;
      }
      // Existing transaction will be updated.
      break;
    }
    elseif ($payment->status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
      $count_succeeded_payments++;
    }
  }

  // Verify data consistency between local order and remote data.
  if ($order->order_id != $received_data['OrderId']) {
    watchdog('easytransac', 'Order id does not match the remote one.', array(), WATCHDOG_ERROR);
    return;
  }
  elseif ($order->uid != $received_data['Uid']) {
    watchdog('easytransac', 'Uid does not match the remote one.', array(), WATCHDOG_ERROR);
    return;
  }

  // Create a new payment transaction for the order.
  $transaction = commerce_payment_transaction_new('easytransac', $order->order_id);
  $transaction->instance_id = $payment_instance['instance_id'];

  $transaction->remote_id = $received_data['Tid'];
  $transaction->amount = commerce_currency_decimal_to_amount($received_data['Amount'], 'EUR');
  $transaction->currency_code = 'EUR';

  $transaction->remote_status = $received_data['Status'];

  $transaction->data['RequestId'] = $received_data['RequestId'];

  $is_multiple_payments = isset($received_data['MultiplePayments']) && $received_data['MultiplePayments'] === 'yes';

  switch ($received_data['Status']) {
    case 'failed':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = $received_data['Message'];
      commerce_order_status_update($order, 'canceled', FALSE, NULL, t('Payment failure.'));
      drupal_set_message(t('Le paiement a échoué.'), 'error');
      break;

    case 'captured':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $multiple_payments_info = ($is_multiple_payments ? (' Payment ' . ($count_succeeded_payments + 1) . ' of 3.') : '');
      $test_info = (isset($received_data['Test']) && $received_data['Test'] === 'yes') ? '[TEST] - ' : '';
      $transaction->message = $test_info . $received_data['Message'] . '.' . $multiple_payments_info;
      commerce_order_status_update($order, 'completed');
      break;

    case 'pending':
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->message = $received_data['Message'];
      break;

    case 'refunded':
      // No refunded statuts available, so fallback to failure status.
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = $received_data['Message'];
      break;
  }

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
}
