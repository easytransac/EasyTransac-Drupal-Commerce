<?php
require __DIR__ . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php';

/**
 * @file
 * Implements Easytransac Website Payment in Drupal Commerce checkout.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function easytransac_commerce_payment_method_info()
{
    $payment_methods = array();

    $payment_methods['easytransac'] = array(
        'base' => 'easytransac',
        'title' => t('EasyTransac Payment'),
        'short_title' => t('ET Payment'),
        'description' => t('Easytransac Website Payment'),
        'display_title' => t('Easytransac Website Payment'),
        'active' => TRUE,
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );

    return $payment_methods;
}

/**
 * Returns the default settings for the EasyTransac payment method.
 */
function easytransac_default_settings()
{
    return array(
        'api_key' => '',
        'currency_code' => 'EUR',
        '3ds' => TRUE,
        'debug_mode' => FALSE,
    );
}

/**
 * Implements hook_menu().
 */
function easytransac_menu()
{
    $items['easytransac/notification'] = array(
        'page callback' => 'easytransac_notification',
        'type' => MENU_CALLBACK,
        'access callback' => 'easytransac_notification_access',
    );
    $items['easytransac/listcards'] = array(
        'page callback' => 'easytransac_listcards',
        'type' => MENU_CALLBACK,
        'access callback' => 'user_is_logged_in',
    );
    return $items;
}

/**
 * Manage notification uri access.
 *
 * @return bool
 *   TRUE.
 */
function easytransac_notification_access()
{
    return TRUE;
}

/**
 * EasyTransac notification URL.
 */
function easytransac_notification()
{
    if (!empty($_POST)) {
        easytransac__add_transaction($_POST);
    }
}

/**
 * Payment method callback: settings form.
 */
function easytransac_settings_form($settings = array())
{
    $form = array();

    // Merge default settings into the stored settings array.
    $settings = (array)$settings + easytransac_default_settings();
l
    // Requirements.
    $openssl_version_supported = OPENSSL_VERSION_NUMBER >= 0x10001000;
    $curl_activated = function_exists('curl_version');

    if (!$openssl_version_supported) {
        drupal_set_message(t('EasyTransac: OpenSSL version not supported "@version" < 1.0.1', array('@version' => OPENSSL_VERSION_TEXT)), 'error');
    }

    if (!$curl_activated) {
        drupal_set_message(t('EasyTransac: PHP cURL extension missing'), 'error');
    }

    $form['api_key'] = array(
        '#type' => 'textfield',
        '#title' => t('EasyTransac API Key'),
        '#description' => t('Your Easytransac API Key'),
        '#default_value' => $settings['api_key'],
        '#required' => TRUE,
    );

    $form['multiple_payments'] = array(
        '#type' => 'checkbox',
        '#title' => t('Allow payments in 3 times'),
        '#description' => t("Option available on demand. Available for payments starting at 100 EUR."),
        '#default_value' => $settings['multiple_payments'],
    );

    $form['3ds'] = array(
        '#type' => 'checkbox',
        '#title' => t('3DSecure transactions only'),
        '#description' => t("3D Secure is a secure payment protocol. Its aim is to reduce fraud for merchants and secure customer payments. The customer will be redirected to his bank's site that will ask for additional information."),
        '#default_value' => $settings['3ds'],
    );

    $form['debug_mode'] = array(
        '#type' => 'checkbox',
        '#title' => t('Debug Mode'),
        '#description' => t("Enable/Disable debug mode"),
        '#default_value' => $settings['debug_mode'],
    );

    $form['one_click'] = array(
        '#type' => 'checkbox',
        '#title' => t('One CLick'),
        '#description' => t("Enable/Disable One Click"),
        '#default_value' => $settings['one_click'],
    );
    return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function easytransac_form_commerce_checkout_form_alter(&$form, &$form_state)
{

    // Adds Easytransac payment option to the checkout form.
    if (!empty($form['commerce_payment']['payment_method']['#options'])) {
        foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
            $temp = explode('|', $key);
            $method_id = $temp[0];

            if ($method_id == 'easytransac') {
                // Reset multiple payment session info.
                $_SESSION['easytransac_multiple_payments'] = 0;
                $variables = array(
                    'path' => drupal_get_path('module', 'easytransac') . '/assets/logo_paiement.png',
                    'title' => 'EasyTransac',
                    'alt' => 'EasyTransac',
                    'attributes' => array(
                        'class' => array(
                            'easytransac-icon',
                        ),
                    ),
                );
                if (isset($_SESSION['easytransac_last_error'])) {
                    drupal_set_message(t('EasyTransac payment error: ') . $_SESSION['easytransac_last_error'], 'error');
                    unset($_SESSION['easytransac_last_error']);
                }
                $value = theme('image', $variables) . ' ' . t('Easytransac - payez avec votre carte de crédit');

                $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'easytransac') . '/easytransac.css';
                break;
            }
        }
    }
}

/**
 * Implements CALLBACK_commerce_payment_method_submit_form().
 *
 * Adds multiple payments option.
 */
function easytransac_submit_form($payment_method, $pane_values, $checkout_pane, $order)
{

    $form = array();

    if ($payment_method['settings']['multiple_payments'] && easytransac__order_supports_multiple_payments($order)) {

        // Order amount.
        $amount = easytransac__order_amount($order);
        $down_payments = easytransac__down_payment($amount, TRUE);

        // Adds multiple payments opt in.
        $form['multiple_payments'] = array(
            '#type' => 'checkbox',
            '#title' => t('Paiement en 3 fois'),
        );
        $form['multiple_payments_rates'] = array(
            '#type' => 'container',
            '#attributes' => array(
                'class' => array(
                    'easytransac-multiple-payments-rates',
                ),
            ),
        );
        $form['multiple_payments_rates']['info'] = array(
            '#markup' => t("Paiement d'un premier acompte de @first suivi de deux mensualités de @second.", $down_payments),
        );
    }

    if (!empty($payment_method['settings']['one_click'])) {
        // Adds OneClick.
        $form['oneclick_namespace'] = array(
            '#type' => 'item',
            '#markup' => '<div id="easytransac-namespace"></div>',
        );
        $form['easytransac_is_oneclick'] = array(
            '#type' => 'hidden',
            '#default_value' => 'no',
            '#attributes' => array(
                'id' => 'easytransac_is_oneclick',
            )
        );
        $form['easytransac_oneclick_card'] = array(
            '#type' => 'hidden',
            '#default_value' => '',
            '#attributes' => array(
                'id' => 'easytransac_oneclick_card',
            )
        );
        $form['oneclick_namespace']['#attached']['js'] = array(
            drupal_get_path('module', 'easytransac') . '/js/oneclick.js',
        );
    }
    return $form;
}

/**
 * Calculates multiple payments.
 *
 * @param int $amount
 *   Amount in cents.
 * @param bool $format
 *   Enables amount formatting.
 *
 * @return array
 *   Each payment's amount.
 */
function easytransac__down_payment($amount, $format = FALSE)
{
    $down_payment = (int)floor($amount / 3);
    $first = $down_payment + ($amount % 3);
    $second = $down_payment;
    $third = $down_payment;
    if ($format) {
        $first = commerce_currency_format($first, 'EUR');
        $second = commerce_currency_format($second, 'EUR');
        $third = commerce_currency_format($third, 'EUR');
    }
    return array('@first' => $first, '@second' => $second, '@third' => $third);
}

/**
 * Order amount helper function.
 *
 * @param object $order
 *   Commerce Order object.
 *
 * @return int
 *   Order amount.
 */
function easytransac__order_amount(stdClass $order)
{
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    return (int)$wrapper->commerce_order_total->amount->value();
}

/**
 * Checks if an order can apply to multiple payments.
 *
 * @param object $order
 *   Commerce Order object.
 *
 * @return bool
 *   TRUE means the order can apply to multiple payments.
 */
function easytransac__order_supports_multiple_payments(stdClass $order)
{
    return easytransac__order_amount($order) >= 10000;
}

/**
 * Implements CALLBACK_commerce_payment_method_submit_form_submit().
 *
 * Checks if the multiple payment option has been chosen.
 * Checks if oneclick payment has been chosen.
 */
function easytransac_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge)
{
    $_SESSION['easytransac_multiple_payments'] = 0;
    if (easytransac__order_supports_multiple_payments($order)) {
        $_SESSION['easytransac_multiple_payments'] = isset($pane_values['multiple_payments']) ? $pane_values['multiple_payments'] : 0;
    }
    $_SESSION['easytransac_is_oneclick'] = isset($pane_values['easytransac_is_oneclick']) ? 1 : 0;
    $_SESSION['easytransac_oneclick_card'] = isset($pane_values['easytransac_oneclick_card']) ? $pane_values['easytransac_oneclick_card'] : null;
}

/**
 * Helper to know if payment is an OneClick one.
 * @return bool
 */
function easytransac__is_oneclick_payment()
{
    return 1 == $_SESSION['easytransac_is_oneclick'] && !empty($_SESSION['easytransac_oneclick_card']);
}

/**
 * Payment method callback: redirect form.
 */
function easytransac_redirect_form($form, &$form_state, $order, $payment_method)
{
    // Init log if debug mode active
    EasyTransac\Core\Logger::getInstance()->setActive(!empty($payment_method['settings']['debug_mode']));
    EasyTransac\Core\Logger::getInstance()->setFilePath(__DIR__ . '/logs/');


    // Errors if the API Key is not configured.
    if (empty($payment_method['settings']['api_key'])) {
        drupal_set_message(t('Please configure your EasyTransac API Key.'), 'error');
        return array();
    }

    if (easytransac__is_oneclick_payment()) {
        return easytransac_oneclick_payment($form, $form_state, $order, $payment_method);
    }

    $return_url = 'checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'];
    $cancel_url = 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'];

    $settings = array(
        'ReturnUrl' => url($return_url, array(
            'absolute' => TRUE,
            'https' => TRUE,
        )),
        'CancelUrl' => url($cancel_url, array(
            'absolute' => TRUE,
            'https' => TRUE,
        )),
        'payment_method' => $payment_method['instance_id'],
    );
    $merged_settings = $payment_method['settings'] + $settings;
    return easytransac_order_form($form, $form_state, $order, $merged_settings);
}

/**
 * Returns a version string.
 * @return string
 */
function easytransac__version_string()
{
    $curl_info_string = function_exists('curl_version') ? 'enabled' : 'not found';
    $openssl_info_string = OPENSSL_VERSION_NUMBER >= 0x10001000 ? 'TLSv1.2' : 'OpenSSL version deprecated';
    $https_info_string = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? 'S' : '';
    $version_string = sprintf('Drupal 2.0.6 [cURL %s, OpenSSL %s, HTTP%s]', $curl_info_string, $openssl_info_string, $https_info_string);
    return $version_string;
}

/**
 * OneClick payment.
 * @global type $user
 * @param type $form
 * @param type $form_state
 * @param type $order
 * @param type $merged_settings
 * @return type
 */
function easytransac_oneclick_payment($form, $form_state, $order, $payment_method)
{
    $api_key = null;
    extract(easytransac__expose_settings());
        // Init log if debug mode active
    EasyTransac\Core\Logger::getInstance()->setActive(isset($debug_mode) && !empty($debug_mode));
    EasyTransac\Core\Logger::getInstance()->setFilePath(__DIR__ . '/logs/');
    

    global $user;
    if (empty($api_key) || empty($user->data['easytransac-clientid'])) {
        $_SESSION['easytransac_last_error'] = 'EasyTransac OneClick payment not available.';
        $cancel_url = 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'];
        drupal_goto($cancel_url);
        return array();
    }
    try {
        // SDK OneClick
        //  EasyTransac\Core\Services::getInstance()->setDebug(true);
        EasyTransac\Core\Services::getInstance()->provideAPIKey($api_key);
        $transaction = (new EasyTransac\Entities\OneClickTransaction())
            ->setAlias(strip_tags($_SESSION['easytransac_oneclick_card']))
            ->setAmount(easytransac__order_amount($order))
            ->setOrderId($order->order_id)
            ->setClientId($user->data['easytransac-clientid'])
            ->setVersion(easytransac__version_string());

            if(!$transaction){
                // Payment cannot proceed.
                $message = sprintf('%s - %s - %s - %s - %s', 
                        strip_tags($_SESSION['easytransac_oneclick_card']),
                        easytransac__order_amount($order),
                        $order->order_id,
                        $user->data['easytransac-clientid'],
                        easytransac__version_string()
                    );
                watchdog('easytransac', 'OneClick INIT FATAL: ' . $message , array(), WATCHDOG_ERROR);
                $_SESSION['easytransac_last_error'] = 'OneClick payment error.';
                $cancel_url = 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'];
                drupal_goto($cancel_url);
            }
    
        $dp = new EasyTransac\Requests\OneClickPayment();
        $response = $dp->execute($transaction);

        /* @var  $doneTransaction \EasyTransac\Entities\DoneTransaction */
        $doneTransaction = $response->getContent();
        if (!$doneTransaction) {
            throw new Exception ('OneClick response couldn\'t be processed by ET SDK.');
        }
        easytransac__add_transaction($doneTransaction, $order, $payment_method);

        if ($doneTransaction->isCaptured() || $doneTransaction->isPending()) {
            // Payment is processed / captured
            $return_url = 'checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'];
            drupal_goto($return_url);
        } else {
            // Payment failed :  Show error to end user.
            $_SESSION['easytransac_last_error'] = $response->getErrorCode() . ' - ' . $response->getErrorMessage();
            $cancel_url = 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'];
            drupal_goto($cancel_url);
        }
    } catch (Exception $exc) {
        watchdog('easytransac', 'OneClick response exception: ' . $exc->getMessage(), array(), WATCHDOG_ERROR);
        drupal_set_message(t('Error @error while contacting the payment provider. Please contact the administrator.', array('@error' => 'ET02')), 'error');
        drupal_goto($cancel_url);
    }
}

/**
 * Payment method callback: redirect form return validation.
 */
function easytransac_redirect_form_validate($order, $payment_method)
{
    if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on') {
        easytransac__add_transaction($_POST, $order, $payment_method);
    }
}

/**
 * Redirects to EasyTransac's external payment page.
 */
function easytransac_order_form($form, &$form_state, $order, $settings)
{
    $api_key = null;
    extract(easytransac__expose_settings());
    EasyTransac\Core\Logger::getInstance()->setActive(isset($debug_mode) && !empty($debug_mode));
    EasyTransac\Core\Logger::getInstance()->setFilePath(__DIR__ . '/logs/');

    // Order amount.
    $amount = easytransac__order_amount($order);

    // Ensure a default value for the payment_method setting.
    $settings += array(
        'payment_method' => '',
    );

    global $user;

    $customer = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);

    // Multiple payment was opted in plus multiple payments must be enabled.
    $multiple_payments = empty($_SESSION['easytransac_multiple_payments']) ? 0 : ($_SESSION['easytransac_multiple_payments'] && $settings['multiple_payments']);

    // Requirements.
    global $language;
    $langcode = $language->language == 'fr' ? 'FRE' : 'ENG';

    // SDK Payment Page
    EasyTransac\Core\Services::getInstance()->provideAPIKey($api_key);

    $ET_customer = (new EasyTransac\Entities\Customer())
        ->setEmail(!empty($user->mail) ? $user->mail : $order->mail)
        ->setUid($user->uid)
        ->setFirstname($customer->commerce_customer_address[LANGUAGE_NONE][0]['first_name'])
        ->setLastname($customer->commerce_customer_address[LANGUAGE_NONE][0]['last_name'])
        ->setAddress($customer->commerce_customer_address[LANGUAGE_NONE][0]['thoroughfare'])
        ->setZipCode($customer->commerce_customer_address[LANGUAGE_NONE][0]['postal_code'])
        ->setCity($customer->commerce_customer_address[LANGUAGE_NONE][0]['locality'])
        ->setBirthDate('')
        ->setNationality('')
        ->setCallingCode('')
        ->setPhone('');

    $transaction = (new EasyTransac\Entities\PaymentPageTransaction())
        ->setAmount($amount)
        ->setCustomer($ET_customer)
        ->setOrderId($order->order_id)
        ->setReturnUrl($settings['ReturnUrl'])
        ->setCancelUrl($settings['CancelUrl'])
        ->setSecure($settings['3ds'] ? 'yes' : 'no')
        ->setVersion(easytransac__version_string())
        ->setLanguage($langcode)
        ->setMultiplePayments($multiple_payments ? 'yes' : 'no');

    if ($multiple_payments) {
        $down_payments = easytransac__down_payment($amount);
        $transaction->setDownPayment($down_payments['@first']);
    }

    $request = new EasyTransac\Requests\PaymentPage();

    $response = $request->execute($transaction);

    $cancel_url = 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'];

    if (!$response->isSuccess()) {
        $message = t('Error: !message', array(
            '!message' => $response->getErrorCode() . ' - ' . $response->getErrorMessage()
        ));
        watchdog('easytransac', $message, array(), WATCHDOG_ERROR);
        drupal_set_message($message, 'error');
        // Payment failed :  Show error to end user.
        $_SESSION['easytransac_last_error'] = $response->getErrorMessage();
        drupal_goto($cancel_url);
    }

    try {
        /* @var  $responseContent \EasyTransac\Entities\PaymentPageInfos */
        $responseContent = $response->getContent();
        if ($responseContent->getPageUrl()) {
            drupal_goto($responseContent->getPageUrl());
        } else {
            drupal_goto($cancel_url);
        }
    } catch (Exception $exc) {
        watchdog('easytransac', 'Response exception: ' . $exc->getMessage(), array(), WATCHDOG_ERROR);
        drupal_set_message(t('Error @error while contacting the payment provider. Please contact the administrator.', array('@error' => 'ET01')), 'error');
        drupal_goto($cancel_url);
    }
    return array();
}

/**
 * Updates order with a transaction.
 *
 * @param array | \EasyTransac\Entities\DoneTransaction $received_data
 *      Data from ET.
 * @param object $order
 *      Commerce order object.
 * @param object $payment_instance
 *      Payment instance object.
 */
function easytransac__add_transaction($received_data, $order = NULL, $payment_instance = NULL)
{
    $api_key = NULL;
    extract(easytransac__expose_settings());
    if (empty($api_key)) {
        drupal_set_message(t('EasyTransac module not configured.'), 'error');
        return;
    }

    /* #var $response\EasyTransac\Entities\Notification $response*/
    /* @var $response \EasyTransac\Entities\DoneTransaction */

    if (is_array($received_data)) {
        try {
            $response = \EasyTransac\Core\PaymentNotification::getContent($received_data, $api_key);
            if (!$response) {
                throw new Exception ('empty response');
            }
        } catch (Exception $exc) {
            watchdog('easytransac', $exc->getMessage(), array(), WATCHDOG_ERROR);
            return;
        }
    } else {
        $response = $received_data;
    }

    // Retrieve payment instance.
    if (is_null($payment_instance)) {
        $payment_instance = commerce_payment_method_instance_load("easytransac|commerce_payment_easytransac");
    }

    if (empty($payment_instance)) {
        watchdog('easytransac', 'No payment instance found.', array(), WATCHDOG_ERROR);
        return;
    }

    // Retrieve orders.
    if (is_null($order)) {
        $order = commerce_order_load($response->getOrderId());
        if (!$order) {
            watchdog('easytransac', 'Unknown order ID received.', array(), WATCHDOG_ERROR);
            return;
        }
    }

    if (empty($order)) {
        watchdog('easytransac', 'No order found.', array(), WATCHDOG_ERROR);
        return;
    }

    $payments = commerce_payment_transaction_load_multiple(array(), array(
        'order_id' => $order->order_id,
    ));

    $count_succeeded_payments = 0;

    // Verify if the received data has already been processed.
    foreach ($payments as $payment) {
        if ($payment->remote_id == $response->getTid()) {
            if ($payment->status != COMMERCE_PAYMENT_STATUS_PENDING) {
                // Transaction already processed.
                watchdog('easytransac', 'Transaction already processed.', array(), WATCHDOG_NOTICE);
                return;
            }
            // Existing transaction will be updated.
            break;
        } elseif ($payment->status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
            $count_succeeded_payments++;
        }
    }

    // Verify data consistency between local order and remote data.
    if ($order->order_id != $response->getOrderId()) {
        watchdog('easytransac', 'Order id does not match the remote one.', array(), WATCHDOG_ERROR);
        return;
    } elseif ($order->uid != $response->getUid()) {
        watchdog('easytransac', 'Uid does not match the remote one.', array(), WATCHDOG_ERROR);
        return;
    }

    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('easytransac', $order->order_id);
    $transaction->instance_id = $payment_instance['instance_id'];

    $transaction->remote_id = $response->getTid();
    $transaction->amount = commerce_currency_decimal_to_amount($response->getAmount(), 'EUR');
    $transaction->currency_code = 'EUR';

    $transaction->remote_status = $response->getStatus();

    $transaction->data['RequestId'] = $response->getRequestId();

    $is_multiple_payments = is_a($response, '\EasyTransac\Entities\DoneTransaction')
        && $response->getMultiplePayments() === 'yes';

        EasyTransac\Core\Logger::getInstance()->setActive(isset($debug_mode) && !empty($debug_mode));
        EasyTransac\Core\Logger::getInstance()->setFilePath(__DIR__ . '/logs/');
    switch ($response->getStatus()) {
        case 'failed':
            $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
            $transaction->message = $response->getMessage();
            commerce_order_status_update($order, 'canceled', FALSE, NULL, t('Payment failure.'));
            drupal_set_message(t('Le paiement a échoué.'), 'error');
            break;

        case 'captured':

            // Saves ClientId
            $user = user_load($response->getUid());
            $user->is_new = false;
            $edit = array();
            $edit['data']['easytransac-clientid'] = $response->getClient()->getId();
            user_save($user, $edit);

            // Saves status
            $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            $multiple_payments_info = ($is_multiple_payments ? (' Payment ' . ($count_succeeded_payments + 1) . ' of 3.') : '');
            $test_info = (is_a($response, '\EasyTransac\Entities\Notification') && $response->getTest() === 'yes') ? '[TEST] - ' : '';
            $transaction->message = $test_info . $response->getMessage() . '.' . $multiple_payments_info;
            commerce_order_status_update($order, 'completed');
            break;

        case 'pending':
            $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
            $transaction->message = $received_data['Message'];
            break;

        case 'refunded':
            // No refunded statuts available, so fallback to failure status.
            $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
            $transaction->message = $received_data['Message'];
            break;
    }
    // Save the transaction information.
    commerce_payment_transaction_save($transaction);
}

/**
 * Expose settings.
 * @return array
 */
function easytransac__expose_settings()
{
    $payment_instance = commerce_payment_method_instance_load('easytransac|commerce_payment_easytransac');
    return $payment_instance['settings'];
}

/**
 * Lists OneClick cards.
 */
function easytransac_listcards()
{
    $output = array('status' => 0);
    $api_key = null;
    extract(easytransac__expose_settings());
    EasyTransac\Core\Logger::getInstance()->setActive(isset($debug_mode) && !empty($debug_mode));
    EasyTransac\Core\Logger::getInstance()->setFilePath(__DIR__ . '/logs/');
    global $user;
    if (!empty($api_key) && !empty($user->data['easytransac-clientid'])) {
        EasyTransac\Core\Services::getInstance()->provideAPIKey($api_key);
        $customer = (new EasyTransac\Entities\Customer())->setClientId($user->data['easytransac-clientid']);
        $request = new EasyTransac\Requests\CreditCardsList();
        $response = $request->execute($customer);
        if ($response->isSuccess()) {
            $buffer = array();
            $year = substr($cc->getYear(), -2, 2);
            foreach ($response->getContent()->getCreditCards() as $cc) {
                /* @var $cc EasyTransac\Entities\CreditCard */
                $buffer[] = array('Alias' => $cc->getAlias(), 'CardNumber' => $cc->getNumber(), 'Month' => $cc->getMonth(), 'Year' => $year);
            }
            $output = array('status' => !empty($buffer), 'packet' => $buffer);
        }
    }
    echo json_encode($output);
}
